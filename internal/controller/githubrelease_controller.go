package controller

import (
	"context"
	"os"

	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
	"sigs.k8s.io/controller-runtime/pkg/log"

	csye7125v1 "github.com/cyse7125-su24-team11/cve-operator/api/v1"
)

// +kubebuilder:rbac:groups=csye7125.tutorial.kubebuilder.io,resources=githubreleases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=csye7125.tutorial.kubebuilder.io,resources=githubreleases/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=batch,resources=jobs,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=batch,resources=jobs/status,verbs=get

// GitHubReleaseReconciler reconciles a GitHubRelease object
type GitHubReleaseReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

func (r *GitHubReleaseReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	// Fetch the GitHubRelease instance
	instance := &csye7125v1.GitHubRelease{}
	err := r.Get(ctx, req.NamespacedName, instance)
	if err != nil {
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	if instance.Status.Processed {
		return ctrl.Result{}, nil
	}

	finalizerName := "csye7125.tutorial.kubebuilder.io/finalizer"

	if instance.ObjectMeta.DeletionTimestamp.IsZero() {
		// CR is not being deleted
		if !controllerutil.ContainsFinalizer(instance, finalizerName) {
			// Add finalizer to CR
			controllerutil.AddFinalizer(instance, finalizerName)
			if err := r.Update(ctx, instance); err != nil {
				return ctrl.Result{}, err
			}
		}
	} else {
		// CR is being deleted
		if controllerutil.ContainsFinalizer(instance, finalizerName) {
			// Run cleanup logic
			job := &batchv1.Job{}
			jobName := "process-" + instance.Name
			jobNamespace := "operator"

			if err := r.Get(ctx, types.NamespacedName{Name: jobName, Namespace: jobNamespace}, job); err == nil {
				if err := r.Delete(ctx, job); err != nil {
					return ctrl.Result{}, err
				}
			}

			// Remove finalizer from CR
			controllerutil.RemoveFinalizer(instance, finalizerName)
			if err := r.Update(ctx, instance); err != nil {
				return ctrl.Result{}, err
			}
		}
		return ctrl.Result{}, nil
	}

	// Create a Job to process the release
	job := r.createJobForRelease(instance)
	if err := r.Create(ctx, job); err != nil {
		log.Error(err, "Failed to create Job for GitHubRelease")
		return ctrl.Result{}, err
	}

	// Update the status to indicate the release has been processed
	instance.Status.Processed = true
	if err := r.Status().Update(ctx, instance); err != nil {
		log.Error(err, "Failed to update GitHubRelease status")
		return ctrl.Result{}, err
	}

	return ctrl.Result{}, nil
}

func (r *GitHubReleaseReconciler) createJobForRelease(release *csye7125v1.GitHubRelease) *batchv1.Job {

	image := os.Getenv("CONTAINER_IMAGE")
	if image == "" {
		image = "maheshpoojaryneu/csye7125:webapp-cve-processor-crd" // Set a default image if the environment variable is not set
	}

	jobName := "process-" + release.Name
	job := &batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Name:      jobName,
			Namespace: "operator",
			Labels: map[string]string{
				"app": "cve-job",
			},
		},
		Spec: batchv1.JobSpec{
			Template: corev1.PodTemplateSpec{
				Spec: corev1.PodSpec{
					RestartPolicy: corev1.RestartPolicyOnFailure,
					//ServiceAccountName: "githubrelease-controller", // Correctly specify the service account for the job
					Affinity: &corev1.Affinity{
						PodAntiAffinity: &corev1.PodAntiAffinity{
							PreferredDuringSchedulingIgnoredDuringExecution: []corev1.WeightedPodAffinityTerm{
								{
									Weight: 100,
									PodAffinityTerm: corev1.PodAffinityTerm{
										LabelSelector: &metav1.LabelSelector{
											MatchExpressions: []metav1.LabelSelectorRequirement{
												{
													Key:      "app",
													Operator: metav1.LabelSelectorOpIn,
													Values:   []string{"cve-job"},
												},
											},
										},
										TopologyKey: "topology.kubernetes.io/zone",
									},
								},
							},
						},
					},
					Containers: []corev1.Container{
						{
							Name:            "processor",
							Image:           image, // Replace with your actual processor image
							ImagePullPolicy: "Always",
							Env: []corev1.EnvVar{
								{
									Name:  "ZIP_URL",
									Value: release.Spec.URLs, // Pass the URL as an environment variable
								},
							},
						},
					},
					ImagePullSecrets: []corev1.LocalObjectReference{
						{Name: "regcred"}, // Reference to the image pull secret
					},
				},
			},
		},
	}
	ctrl.SetControllerReference(release, job, r.Scheme)
	return job
}

// SetupWithManager sets up the controller with the Manager.
func (r *GitHubReleaseReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&csye7125v1.GitHubRelease{}).
		Complete(r)
}
