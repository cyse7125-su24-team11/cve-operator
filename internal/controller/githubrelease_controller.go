package controller

import (
	"context"

	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	csye7125v1 "github.com/cyse7125-su24-team11/cve-operator/api/v1"
)

// +kubebuilder:rbac:groups=csye7125.tutorial.kubebuilder.io,resources=githubreleases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=csye7125.tutorial.kubebuilder.io,resources=githubreleases/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=batch,resources=jobs,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=batch,resources=jobs/status,verbs=get

// GitHubReleaseReconciler reconciles a GitHubRelease object
type GitHubReleaseReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

func (r *GitHubReleaseReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	// Fetch the GitHubRelease instance
	instance := &csye7125v1.GitHubRelease{}
	err := r.Get(ctx, req.NamespacedName, instance)
	if err != nil {
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	if instance.Status.Processed {
		return ctrl.Result{}, nil
	}

	// Create a Job to process the release
	job := r.createJobForRelease(instance)
	if err := r.Create(ctx, job); err != nil {
		log.Error(err, "Failed to create Job for GitHubRelease")
		return ctrl.Result{}, err
	}

	// Update the status to indicate the release has been processed
	instance.Status.Processed = true
	if err := r.Status().Update(ctx, instance); err != nil {
		log.Error(err, "Failed to update GitHubRelease status")
		return ctrl.Result{}, err
	}

	return ctrl.Result{}, nil
}

func (r *GitHubReleaseReconciler) createJobForRelease(release *csye7125v1.GitHubRelease) *batchv1.Job {
	jobName := "process-" + release.Name
	job := &batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Name:      jobName,
			Namespace: release.Namespace,
		},
		Spec: batchv1.JobSpec{
			Template: corev1.PodTemplateSpec{
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:  "cveprocessor",
							Image: "busybox",                      // Replace with your image
							Args:  []string{release.Spec.URLs[0]}, // Adjust based on URLs field
						},
					},
					RestartPolicy: corev1.RestartPolicyOnFailure,
				},
			},
		},
	}
	ctrl.SetControllerReference(release, job, r.Scheme)
	return job
}

// SetupWithManager sets up the controller with the Manager.
func (r *GitHubReleaseReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&csye7125v1.GitHubRelease{}).
		Complete(r)
}
