/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	// batchv1 "k8s.io/api/batch/v1"
	// corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// GitHubReleasesMonitorSpec defines the desired state of GitHubReleasesMonitor
type GitHubReleasesMonitorSpec struct {
	// +kubebuilder:validation:MinLength=0

	// URL of the GitHub repository releases page to monitor
	URL string `json:"url"`
	// +kubebuilder:validation:MinLength=0
	// MonitorFrom specifies the start time for monitoring releases.
	// It can be "now" or a specific date in YYYY-MM-DD format.
	MonitorFrom string `json:"monitorFrom"`
}

// GitHubReleasesMonitorStatus defines the observed state of GitHubReleasesMonitor
type GitHubReleasesMonitorStatus struct {
	Releases []string `json:"releases,omitempty"`

	// Time (in UTC) when the releases were last retrieved.
	LastRetrieved metav1.Time `json:"lastRetrieved,omitempty"`

	// Value of MonitorFrom in the form of timestamp (in UTC).
	MonitorFromTimestamp metav1.Time `json:"monitorFromTimestamp,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// GitHubReleasesMonitor is the Schema for the githubreleasesmonitors API
type GitHubReleasesMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   GitHubReleasesMonitorSpec   `json:"spec,omitempty"`
	Status GitHubReleasesMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GitHubReleasesMonitorList contains a list of GitHubReleasesMonitor
type GitHubReleasesMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GitHubReleasesMonitor `json:"items"`
}

func init() {
	SchemeBuilder.Register(&GitHubReleasesMonitor{}, &GitHubReleasesMonitorList{})
}
